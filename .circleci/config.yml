
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#define tam 100

typedef struct matricula{
	int RA;
	char nome[80];
	char email[40];
	char turma;
}MatAluno;


typedef MatAluno * Hash[tam];


int funcaoEspalhamento(int RA){
	return (RA % tam);
}


void inicializaHash(Hash tab){
	for(int i = 0; i < tam; i++){
		tab[i] = NULL;
	}
}


MatAluno * insereTabelaHash(Hash tab, int ra, char* name, char * mail, char tur){
	int h = funcaoEspalhamento(ra);
	while(tab[h] != NULL){
		if(tab[h] -> RA == ra){
			break;
		}
		h = (h+1) % tam;
	}
	if(tab[h] == NULL){
		tab[h] =  (MatAluno*) malloc(sizeof(MatAluno));
		tab[h] -> RA = ra;
	}
	strcpy(tab[h] -> nome, name);
	strcpy(tab[h] -> email, mail);
	tab[h] -> turma = tur;
	return tab[h];
};


void imprimirHash(Hash tab){
	for(int i = 0; i < tam; i++){
		if(tab[i] != NULL){
			printf("\n Posição no vetor %d, RA: %d, Nome: %s, Email: %s, Turma: %c", 
			        i, tab[i] -> RA, tab[i] -> nome, tab[i] -> email, tab[i] -> turma);
		}
	}
}


MatAluno * buscaTabela(Hash tab, int ra){
	int h = funcaoEspalhamento(ra);
	if(tab[h] != NULL){
		if(tab[h] -> RA == ra){
			return tab[h];
		}
	}
	return NULL;
}


void removeTabela(Hash tab, int ra){
	//A variável h recebe o valor do índice da função de espalhamento
	int h = funcaoEspalhamento(ra);
	if(tab[h] != NULL){
			if(tab[h] -> RA == ra){
			tab[h] = NULL;
			printf("\n RA (%d) excluído!", ra);
		}else{
			printf("\n RA (%d) não encontrado!", ra);
		}
	}else{
		printf("\n RA (%d) não encontrado!", ra);
	}
}


int tamanhoTabela(Hash tab){
	int total = 0;
	for(int i = 0; i < tam; i++){
		if(tab[i] != NULL){
			total++;
		}
	}
	return total;
}


int main(){
	setlocale(LC_ALL, "Portuguese");
	Hash tabela;
	inicializaHash(tabela);
	insereTabelaHash(tabela, 101, (char*)"Anderson Dias", (char*)"teste1@gmail.com", 'A');
	insereTabelaHash(tabela, 110, (char*)"Ayslam", (char*)"teste2@gmail.com", 'B');
	insereTabelaHash(tabela, 103, (char*)"Bruno", (char*)"teste3@gmail.com", 'C');
	insereTabelaHash(tabela, 104, (char*)"Yan", (char*)"teste4@gmail.com", 'D');
	insereTabelaHash(tabela, 120, (char*)"João", (char*)"teste5@gmail.com", 'E');
	imprimirHash(tabela);
	printf("\n\n Tamanho da tabela: %d", tamanhoTabela(tabela));
	
	MatAluno * retorno1;
	retorno1 = buscaTabela(tabela, 110);
	if(retorno1 == NULL){
		printf("\n\n Registro (%d) não encontrado!", retorno1->RA);
	}else{
		printf("\n\n Registro encontrado: %d, %s, %s, %c", retorno1->RA, retorno1->nome, retorno1->email, retorno1->turma);
	}
	
	int RA = 110;
	printf("\n Remova RA 110.");
	removeTabela(tabela, RA);
	printf("\n");
	imprimirHash(tabela);
	
	MatAluno * retorno2;
	retorno2 = buscaTabela(tabela, 110);
	if(retorno2 == NULL){
		printf("\n\n Registro (%d) não encontrado!", retorno2->RA);
	}else{
		printf("\n\n Registro encontrado: %d, %s, %s, %c", retorno2->RA, retorno2->nome, retorno2->email, retorno2->turma);
	}
	
		
	return 0;
}